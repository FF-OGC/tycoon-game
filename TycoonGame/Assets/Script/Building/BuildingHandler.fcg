import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Global/CSVReadingHandler.fcg" as CSVReadingHandler
import "Physics.fcc" as Physics
import "Economy.fcc" as Economy
import "Workflow.fcc" as Workflow

graph Script {
    //Executed when entity is created
    configFile CsvID

    currentLevel int 
    unlockCost int
    buildingType BuildingTypeEnum

    model entity
    valueDisplay entity
    unlockButton entity
    unlockDisplay entity
    upgradeButton entity
    upgradeDisplay entity

    
    value int
    upgradeCost int 
    cooldown int

    event OnAwake() {
        init ()
    }


    event OnPhaseStart(phase entity<Phase>) {
        LogInfo("currentLevel" + currentLevel )
    }

    async func init (){
        currentLevel = thisEntity<Building>.CurrentLevel
        unlockCost = thisEntity<Building>.UnlockCost
        buildingType = thisEntity<Building>.Type

        configFile = thisEntity<BuildingConfig>.ConfigFile

        model = thisEntity<BuildingChildren>.Model
        valueDisplay = thisEntity<BuildingChildren>.ValueDisplayText
        unlockButton = thisEntity<BuildingChildren>.UnlockButton
        unlockDisplay = thisEntity<BuildingChildren>.UnlockButtonDisplayText
        upgradeButton = thisEntity<BuildingChildren>.UpgradeButton
        upgradeDisplay = thisEntity<BuildingChildren>.UpgradeButtonDisplayText

        WaitForNextFrame()
        updateUnlockDisplay()
    }



    func logtest (){
        LogInfo("currentLevel" + currentLevel )
        LogInfo("unlockCost" + unlockCost )
        LogInfo("buildingType" + buildingType )
        LogInfo("configFile" + configFile )
        LogInfo("model" + model )
        LogInfo("modelDisplay" + valueDisplay )
        LogInfo("unlockButton" + unlockButton )
        LogInfo("unlockDisplay" + unlockDisplay )
        LogInfo("upgradeButton" + upgradeButton )
        LogInfo("upgradeDisplay" + upgradeDisplay )

    }


    func updateCurrentLevel(){
        currentLevel = thisEntity<Building>.CurrentLevel
    }

    func updateValue(){
        value = CSVReadingHandler.GetValueByLevel(configFile, currentLevel)
    }

    func updateUpgradeCost(){
        upgradeCost = CSVReadingHandler.GetUpgradeCostByLevel(configFile, currentLevel)
    }

    func updateCooldown(){
        cooldown = CSVReadingHandler.GetCooldownByLevel(configFile, currentLevel)
    }

    func updateUnlockDisplay (){
        var _displayString =  "UNLOCK: " +  unlockCost
        unlockDisplay<Text>.Content = _displayString
    }

    func updateUpgradeDisplay (){
        var _displayString = "UPGRADE COST: " + upgradeCost
        upgradeDisplay<Text>.Content = _displayString
    }

    func updateValueDisplay(){
        var _displayString string

        if buildingType == BuildingTypeEnum.Action {
            _displayString =  value + " Per hit"
        } else if buildingType == BuildingTypeEnum.Idle{
            _displayString =  value + " Per span" + cooldown + "/s"
        }

        valueDisplay<Text>.Content = _displayString
    }

    func setActiveUpgrade(input bool){
    }

    func levelUp(){
        LogInfo("before " + thisEntity<Building>.CurrentLevel)
        thisEntity<Building>.CurrentLevel += 1
        updateCurrentLevel()
        LogInfo("thisEntity<Building>.CurrentLevel " + thisEntity<Building>.CurrentLevel)
    }

    func unlockBuilding(){
        levelUp()

        //Enable Model
        SetActive(GetParent(model), true)
        SetActive(model,true)
        SetActive(valueDisplay,true)

        updateValue()
        updateValueDisplay()

        if buildingType != BuildingTypeEnum.Decoration {
            SetActive(GetParent(upgradeButton), true)
            SetActive(upgradeButton,true)
            SetActive(upgradeDisplay,true)

            updateUpgradeCost()
            updateUpgradeDisplay()
        }
        

        SetActive(unlockButton,false)
        SetActive(unlockDisplay,false)
    }

    func upgradeBuilding(){
        levelUp()

        updateValue()
        updateValueDisplay()


        updateUpgradeCost()
        //Off upgrade option if max level
        if upgradeCost == -1 {
            SetActive(upgradeButton, false)
            SetActive(upgradeDisplay, false)
        } else {
            updateUpgradeDisplay()
        }



    }

}