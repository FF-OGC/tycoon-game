import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Global/CSVReadingHandler.fcg" as CSVReadingHandler
import "Physics.fcc" as Physics
import "Economy.fcc" as Economy
import "Workflow.fcc" as Workflow

import "../Building/GlobalBuildingManager.fcg" as GlobalBuildingManager
import "../Building/BuildingHandler.fcg" as BuildingHandler
import "../Economy/BigNumberHandler.fcg" as BigNumberHandler
import "../Player/PlayerStaticInformation.fcg" as PlayerStaticInformation
import "../Player/PlayerInventory/PlayerInventory.fcg" as PlayerInventory

import "List.fcc" as List

graph Script {
    //Executed when entity is created
    configFile CsvID

    buildingID int
    buildingUnlockState int
    buildingName string
    unlockCost List<int>
    buildingType BuildingTypeEnum

    inputID int
    outputID int
    cooldown int

    model entity
    valueDisplay entity
    unlockButton entity
    unlockDisplay entity
    refillButton entity
    refillDisplay entity

    buildingUnlockLevelList List<int> 
    buildingUnlockBuildingList List<entity> 
    
    cookingCount int
    isCooking bool

    owner entity<Player>

    event OnAwake() {
        init ()
    }

    async func init (){
        WaitForNextFrame()
        buildingID = thisEntity<Building>.ID
        buildingUnlockState = thisEntity<Building>.State
        buildingName = CSVReadingHandler.GetNameByBuildingID(EResCSV.Building,buildingID)
        unlockCost = thisEntity<Building>.UnlockCost as List<int>

        model = thisEntity<BuildingChildren>.Model
        valueDisplay = thisEntity<BuildingChildren>.ValueDisplayText
        unlockButton = thisEntity<BuildingChildren>.UnlockButton
        unlockDisplay = thisEntity<BuildingChildren>.UnlockButtonDisplayText
        refillButton = thisEntity<BuildingChildren>.RefillButton
        refillDisplay = thisEntity<BuildingChildren>.RefillButtonDisplayText

        inputID = CSVReadingHandler.GetInputIDByBuildingID(EResCSV.Building,buildingID)
        outputID = CSVReadingHandler.GetOutputIDByBuildingID(EResCSV.Building,buildingID)
        cooldown = CSVReadingHandler.GetCooldownByBuildingID(EResCSV.Building,buildingID)

        cookingCount = 0

        owner = PlayerStaticInformation.playerHost

        WaitForNextFrame()
        initDisplay()
        
        GlobalBuildingManager.BuildingList[buildingID] = thisEntity
        GlobalBuildingManager.BuildingStateList[buildingID] = buildingUnlockState 

        owner = PlayerStaticInformation.playerHost

        setActiveGameStart()
    }




    func setActiveGameStart(){
        SetActive(thisEntity, true)
        if buildingUnlockState == -1 {
            setActiveUnlock(false)
            setActiveUpgrade(false)
            setActiveModel(false)
        } else if buildingUnlockState == 0 {
            setActiveUnlock(true)
            setActiveUpgrade(false)
            setActiveModel(false)
        } else if buildingUnlockState >0 {
            setActiveUnlock(false)
            setActiveUpgrade(true)
            setActiveModel(true)
        }

        initDisplay()
    }

    func updateValue(){
    }

    func updateUpgradeCost(){
    }

    func updateCooldown(){
    }
    func initDisplay(){
        if buildingUnlockState == 0 {
            updateUnlockDisplay()
        } else if buildingUnlockState > 0 {
            updateRefillDisplay()
            updateValueDisplay()
        }
    }

    func updateUnlockDisplay (){
        var _displayString =  "UNLOCK "  + buildingName+": " +  BigNumberHandler.ConvertListNumToString(unlockCost)
        unlockDisplay<Text>.Content = _displayString
    }

    func updateRefillDisplay (){
    }

    func updateValueDisplay(){
    
    }

    func setActiveUnlock(isActive bool){
        SetActive(unlockButton, isActive)
        SetActive(unlockDisplay, isActive)
    }

    func setActiveUpgrade(isActive bool){
        SetActive(refillButton, isActive)
        SetActive(refillDisplay, isActive)
    }

    func setActiveModel(isActive bool){
        SetActive(model, isActive)
        SetActive(valueDisplay, isActive)
    }


    func unlockBuilding(){
        //Enable Model
        SetActive(GetParent(model), true)
        SetActive(model,true)
        SetActive(valueDisplay,true)

        updateValue()
        updateValueDisplay()

        if buildingType != BuildingTypeEnum.Decoration {
            SetActive(GetParent(refillButton), true)
            SetActive(refillButton,true)
            SetActive(refillDisplay,true)

            updateUpgradeCost()
            updateRefillDisplay()
        }

        SetActive(unlockButton,false)
        SetActive(unlockDisplay,false)
    }


}