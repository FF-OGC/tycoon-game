import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Global/CSVReadingHandler.fcg" as CSVReadingHandler
import "Physics.fcc" as Physics
import "Economy.fcc" as Economy
import "Workflow.fcc" as Workflow

import "../Building/GlobalBuildingManager.fcg" as GlobalBuildingManager
import "../Building/BuildingHandler.fcg" as BuildingHandler

import "List.fcc" as List

graph Script {
    //Executed when entity is created
    configFile CsvID

    buildingID int
    currentLevel int 
    unlockCost int
    buildingType BuildingTypeEnum

    model entity
    valueDisplay entity
    unlockButton entity
    unlockDisplay entity
    upgradeButton entity
    upgradeDisplay entity

    buildingUnlockLevelList List<int> 
    buildingUnlockBuildingList List<entity> 
    
    value int
    upgradeCost int 
    cooldown int

    event OnAwake() {
        init ()
    }

    async func init (){
        buildingID = thisEntity<Building>.ID
        currentLevel = thisEntity<Building>.CurrentLevel
        unlockCost = thisEntity<Building>.UnlockCost
        buildingType = thisEntity<Building>.Type

        configFile = thisEntity<BuildingConfig>.ConfigFile

        model = thisEntity<BuildingChildren>.Model
        valueDisplay = thisEntity<BuildingChildren>.ValueDisplayText
        unlockButton = thisEntity<BuildingChildren>.UnlockButton
        unlockDisplay = thisEntity<BuildingChildren>.UnlockButtonDisplayText
        upgradeButton = thisEntity<BuildingChildren>.UpgradeButton
        upgradeDisplay = thisEntity<BuildingChildren>.UpgradeButtonDisplayText

        WaitForNextFrame()
        initDisplay()
        
        GlobalBuildingManager.BuildingList[buildingID] = thisEntity
        GlobalBuildingManager.BuildingLevelList[buildingID] = currentLevel 

        initBuildingUnlock()

        setActiveGameStart()
    }

    func initBuildingUnlock (){
        if HasComponent(thisEntity,typeof(BuildingUnlock)) {
            buildingUnlockLevelList = thisEntity<BuildingUnlock>.ListLevelUnlock
            buildingUnlockBuildingList = thisEntity<BuildingUnlock>.ListBuildingUnlock
        }
    }

    func setActiveGameStart(){
        SetActive(thisEntity, true)
        if currentLevel == -1 {
            setActiveUnlock(false)
            setActiveUpgrade(false)
            setActiveModel(false)
        } else if currentLevel == 0 {
            setActiveUnlock(true)
            setActiveUpgrade(false)
            setActiveModel(false)
        } else if currentLevel >0 {
            setActiveUnlock(false)
            setActiveUpgrade(true)
            setActiveModel(true)
        }

        initDisplay()
    }



    func logtest (){
        LogInfo("currentLevel" + currentLevel )
        LogInfo("unlockCost" + unlockCost )
        LogInfo("buildingType" + buildingType )
        LogInfo("configFile" + configFile )
        LogInfo("model" + model )
        LogInfo("modelDisplay" + valueDisplay )
        LogInfo("unlockButton" + unlockButton )
        LogInfo("unlockDisplay" + unlockDisplay )
        LogInfo("upgradeButton" + upgradeButton )
        LogInfo("upgradeDisplay" + upgradeDisplay )
    }


    func updateCurrentLevel(){
        currentLevel = thisEntity<Building>.CurrentLevel
    }

    func updateValue(){
        value = CSVReadingHandler.GetValueByLevel(configFile, currentLevel)
    }

    func updateUpgradeCost(){
        upgradeCost = CSVReadingHandler.GetUpgradeCostByLevel(configFile, currentLevel)
    }

    func updateCooldown(){
        cooldown = CSVReadingHandler.GetCooldownByLevel(configFile, currentLevel)
    }

    func initDisplay(){
        if currentLevel == 0 {
            updateUnlockDisplay()
        } else if currentLevel > 0 {
            updateUpgradeDisplay()
            updateValueDisplay()
        }
    }

    func updateUnlockDisplay (){
        var _displayString =  "UNLOCK: " +  unlockCost
        unlockDisplay<Text>.Content = _displayString
    }

    func updateUpgradeDisplay (){
        updateUpgradeCost()
        var _displayString = "UPGRADE COST: " + upgradeCost
        upgradeDisplay<Text>.Content = _displayString
    }

    func updateValueDisplay(){
        updateValue()
        var _displayString string

        if buildingType == BuildingTypeEnum.Action {
            _displayString =  value + " Per hit"
        } else if buildingType == BuildingTypeEnum.Idle{
            _displayString =  value + " Per span" + cooldown + "/s"
        }

        valueDisplay<Text>.Content = _displayString
    }

    func setActiveUnlock(isActive bool){
        SetActive(unlockButton, isActive)
        SetActive(unlockDisplay, isActive)
    }


    func setActiveUpgrade(isActive bool){
        SetActive(upgradeButton, isActive)
        SetActive(upgradeDisplay, isActive)
    }

    func setActiveModel(isActive bool){
        SetActive(model, isActive)
        SetActive(valueDisplay, isActive)
    }


    func levelUp(){
        LogInfo("before " + thisEntity<Building>.CurrentLevel)
        thisEntity<Building>.CurrentLevel += 1
        updateCurrentLevel()
        LogInfo("thisEntity<Building>.CurrentLevel " + thisEntity<Building>.CurrentLevel)

    }

    func unlockBuilding(){
        levelUp()

        //Enable Model
        SetActive(GetParent(model), true)
        SetActive(model,true)
        SetActive(valueDisplay,true)

        updateValue()
        updateValueDisplay()

        if buildingType != BuildingTypeEnum.Decoration {
            SetActive(GetParent(upgradeButton), true)
            SetActive(upgradeButton,true)
            SetActive(upgradeDisplay,true)

            updateUpgradeCost()
            updateUpgradeDisplay()
        }

        if HasComponent(thisEntity,typeof(SpecialEventAfterUnlocked)) {
            LogInfo(" super")
            DispatchEvent(UNLOCK_EVENT,thisEntity,List<object>{})
        }

        SetActive(unlockButton,false)
        SetActive(unlockDisplay,false)
    }

    func upgradeBuilding(){
        levelUp()

        updateValue()
        updateValueDisplay()


        updateUpgradeCost()
        //Off upgrade option if max level
        if upgradeCost == -1 {
            SetActive(upgradeButton, false)
            SetActive(upgradeDisplay, false)
        } else {
            updateUpgradeDisplay()
        }

        
        if HasComponent(thisEntity,typeof(BuildingUnlock)) {
            checkBuildingUnlock()
        }

    }

    func checkBuildingUnlock(){
            if List.Contain(buildingUnlockLevelList,currentLevel){
                var index = IndexOf(buildingUnlockLevelList, currentLevel)
                var _unlockedBuilding = buildingUnlockBuildingList[index]
                _unlockedBuilding<BuildingHandler>.levelUp()
                _unlockedBuilding<BuildingHandler>.setActiveGameStart()
            }
    }

}