import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import "../Global/CSVReadingHandler.fcg" as CSVReadingHandler
import "Physics.fcc" as Physics
import "Economy.fcc" as Economy
import "Workflow.fcc" as Workflow

import "../Building/GlobalBuildingManager.fcg" as GlobalBuildingManager
import "../Building/BuildingHandler.fcg" as BuildingHandler
import "../Economy/BigNumberHandler.fcg" as BigNumberHandler

import "List.fcc" as List

graph Script {
    //Executed when entity is created
    configFile CsvID

    buildingID int
    buildingUnlockState int
    unlockCost List<int>
    buildingType BuildingTypeEnum

    model entity
    valueDisplay entity
    unlockButton entity
    unlockDisplay entity
    refillButton entity
    refillDisplay entity

    buildingUnlockLevelList List<int> 
    buildingUnlockBuildingList List<entity> 
    
    value List<int> 
    upgradeCost List<int> 
    cooldown int

    event OnAwake() {
        init ()
    }

    async func init (){
        buildingID = thisEntity<Building>.ID
        buildingUnlockState = thisEntity<Building>.State
        unlockCost = thisEntity<Building>.UnlockCost as List<int>

        model = thisEntity<BuildingChildren>.Model
        valueDisplay = thisEntity<BuildingChildren>.ValueDisplayText
        unlockButton = thisEntity<BuildingChildren>.UnlockButton
        unlockDisplay = thisEntity<BuildingChildren>.UnlockButtonDisplayText
        refillButton = thisEntity<BuildingChildren>.RefillButton
        refillDisplay = thisEntity<BuildingChildren>.RefillButtonDisplayText

        WaitForNextFrame()
        initDisplay()
        
        GlobalBuildingManager.BuildingList[buildingID] = thisEntity
        GlobalBuildingManager.BuildingStateList[buildingID] = buildingUnlockState 

        setActiveGameStart()
    }


    func setActiveGameStart(){
        SetActive(thisEntity, true)
        if buildingUnlockState == -1 {
            setActiveUnlock(false)
            setActiveUpgrade(false)
            setActiveModel(false)
        } else if buildingUnlockState == 0 {
            setActiveUnlock(true)
            setActiveUpgrade(false)
            setActiveModel(false)
        } else if buildingUnlockState >0 {
            setActiveUnlock(false)
            setActiveUpgrade(true)
            setActiveModel(true)
        }

        initDisplay()
    }

    func updateValue(){
    }

    func updateUpgradeCost(){
    }

    func updateCooldown(){
    }

    func initDisplay(){
        // if currentLevel == 0 {
        //     updateUnlockDisplay()
        // } else if currentLevel > 0 {
        //     updaterefillDisplay()
        //     updateValueDisplay()
        // }
    }

    func updateUnlockDisplay (){
        // var _displayString =  "UNLOCK "  + buildingName+": " +  BigNumberHandler.ConvertListNumToString(unlockCost)
        // unlockDisplay<Text>.Content = _displayString
    }

    func updaterefillDisplay (){
        // updateUpgradeCost()
        // var _displayString = "UPGRADE " + buildingName+ ": " +  BigNumberHandler.ConvertListNumToString(upgradeCost)
        // refillDisplay<Text>.Content = _displayString
    }

    func updateValueDisplay(){
        updateValue()
        var _displayString string

        if buildingType == BuildingTypeEnum.Action {
            _displayString = BigNumberHandler.ConvertListNumToString(value)   + " Per hit"
        } else if buildingType == BuildingTypeEnum.Idle{
            _displayString =  BigNumberHandler.ConvertListNumToString(value)  + " Per : "+"3/s"
        }

        valueDisplay<Text>.Content = _displayString
    }

    func setActiveUnlock(isActive bool){
        SetActive(unlockButton, isActive)
        SetActive(unlockDisplay, isActive)
    }


    func setActiveUpgrade(isActive bool){
        SetActive(refillButton, isActive)
        SetActive(refillDisplay, isActive)
    }

    func setActiveModel(isActive bool){
        SetActive(model, isActive)
        SetActive(valueDisplay, isActive)
    }


    func levelUp(){
        /*
        thisEntity<Building>.CurrentLevel += 1
        updateCurrentLevel()
        */
    }

    func unlockBuilding(){
        levelUp()
        //Enable Model
        SetActive(GetParent(model), true)
        SetActive(model,true)
        SetActive(valueDisplay,true)

        updateValue()
        updateValueDisplay()

        if buildingType != BuildingTypeEnum.Decoration {
            SetActive(GetParent(refillButton), true)
            SetActive(refillButton,true)
            SetActive(refillDisplay,true)

            updateUpgradeCost()
            updaterefillDisplay()
        }

        SetActive(unlockButton,false)
        SetActive(unlockDisplay,false)
    }

    func upgradeBuilding(){
        levelUp()

        updateValue()
        updateValueDisplay()


        updateUpgradeCost()
        //Off upgrade option if max level
        if upgradeCost[0] == -1 {
            SetActive(refillButton, false)
            SetActive(refillDisplay, false)
        } else {
            updaterefillDisplay()
        }

        
    }

}