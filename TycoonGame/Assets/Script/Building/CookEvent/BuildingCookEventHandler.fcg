import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Hud.fcc" as Hud
import "List.fcc" as List

import "../../Global/CSVReadingHandler.fcg" as CSVReadingHandler
import "../../Player/PlayerStaticInformation.fcg" as PlayerStaticInformation
import "Items.fcc" as Items
import "../../Player/PlayerEquipment/PlayerEquipmentHandler.fcg" as PlayerEquipmentHandler
import "Math.fcc" as Math
 
import "../../Item/ItemHandler.fcg" as ItemHandler



graph BuildingCookEventHandler {
    queueItemID List<int>
    isCooking bool
    MAX int = 10
    
    outputItemID List<int>
    outputItemSize List<float>
    outputItemMutation List<string>

    output List<entity>
    outputEntity List<entity>

    //Executed when entity is created
    event OnAwake() {
        queueItemID  = List<int>{}

        WaitForNextFrame()
        output = List<entity>{}
        outputEntity = List<entity>{}

        outputItemID  = List<int>{}
        outputItemSize = List<float>{}
        outputItemMutation = List<string>{}

        Append(output, thisEntity<OutputSlot>.slot1)
        Append(output, thisEntity<OutputSlot>.slot2)
        Append(output, thisEntity<OutputSlot>.slot3)
        Append(output, thisEntity<OutputSlot>.slot4)
    }

    func initOutputSlot (){

    }
    
    event COOK(itemID object) {
        var _player = PlayerStaticInformation.playerHost
        DispatchEvent(SHOW_CUSTOMUI, _player, List<object>{"StartCooking"})
        LogInfo("event cook starting")
        addCookingQueue(itemID as int)
        if isCooking == false{
            isCooking = true
            while isCooking{
                while List.Length(queueItemID) > 0 {
                    LogInfo("length + " +List.Length(queueItemID) )
                    var cookItemID = popCookingQueue()
                    var cookTimeCooldown = CSVReadingHandler.getItemCookingTimeByItemID(EResCSV.ItemCSV, cookItemID)
                    WaitForMillisecond(cookTimeCooldown * 1000)
                    var cookItemOutputID = CSVReadingHandler.getOutputItemByItemID(EResCSV.ItemCSV,cookItemID)
                    var randomSize = RandomFloat(0.5,10)
                    addOutputQueue(cookItemOutputID,randomSize,"", _player)
                    // _player<PlayerEquipmentHandler>.equipmentAddItem(cookItemOutputID,randomSize,"")
                    LogInfo("Cook finish - give back : " +cookItemOutputID )
                    DispatchEvent(SHOW_CUSTOMUI, _player, List<object>{"DoneCooking"})
                }
                isCooking = false
            }
        }
    }

    func addCookingQueue(itemID int){
        if checkSlotAvailable(){
            Append(queueItemID, itemID)
        } else {
            LogInfo("full waiting")
        }
    }

    func addOutputQueue(itemID int, itemSize float, itemMutation string , player entity<Player>){
        Append(outputItemID, itemID) 
        Append(outputItemSize, itemSize) 
        Append(outputItemMutation, itemMutation) 

        var index = List.Length(outputItemID) 
        if index >4 {
            player<PlayerEquipmentHandler>.equipmentAddItem(itemID,itemSize,itemMutation)
        } else {
            var outputIndexEntity  = output[index-1]
            LogInfo("output" + output)
            LogInfo("outputIndexEntity" + outputIndexEntity)
            var outputPos = outputIndexEntity<Transform>.Position
            Append(outputEntity, globalEntity<ItemHandler>.createItem(itemID, itemSize , itemMutation, outputPos ))
        }

        // globalEntity<ItemHandler>.createItem()
        
    }

    func popCookingQueue () int{
        if List.Length(queueItemID) > 0 {
            var queueClone = List.Clone(queueItemID) as List<int>
            var _returnItem = queueClone[0] as int
            RemoveAt(queueItemID,0)
            return _returnItem
        } else {
            LogInfo("done cooking")
        }
    }

    func checkSlotAvailable() bool{
        if List.Length(queueItemID) < 10 {
            return true
        } else {
            return false
        }
    }

    

}