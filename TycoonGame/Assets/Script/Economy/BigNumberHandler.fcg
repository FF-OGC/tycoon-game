import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Strings.fcc" as Strings
import "Player.fcc" as Player
import "List.fcc" as List
import "Math.fcc" as Math

graph BigNumberHandler {

    func shortenNumber(num List<int>){
        for i = 0, List.Length(num), 1 {
            if num[i]> 999 {
                if i== List.Length(num) - 1 && num[List.Length(num) - 1 ] >0{
                    Append(num,num[i] / 1000)
                } else {
                    num[i+1] = num[i+1] + num[i] / 1000
                }
                num[i] = num[i] % 1000
            }
        }
    }
    
    func cleanNumber(num List<int>){
        if (List.Length(num) == 0 ){
            return
        }

        while num[List.Length(num)-1] == 0{
            List.RemoveAt(num,List.Length(num)-1)
            if (List.Length(num) == 0 ){
                return
            }
        }
    }

    
    func addNumber(num1 List<int>, num2 List<int>) {
        fixBlankList(num1)
        for i = 0, getMaxLength2Num(num1,num2), 1 {
            num1[i] = num1[i] + num2[i]
        }
        shortenNumber(num1)
    }   


    func subtractNumber(num1 List<int>, num2 List<int>) {
        for i = 0, List.Length(num1), 1 {
            if num1[i] < num2[i]{
                num1[i] =  1000 - num2[i] + num1[i]
                num1[i+1] = num1[i+1]- 1
            } else {
                num1[i] = num1[i] - num2[i]
            }
        }
        shortenNumber(num1)
    }

    func multiplierNumber (num1 List<int>, multiplier float) {
        for i = 0, List.Length(num1), 1 {
            num1[i]  = Ceil( num1[i] * multiplier)
        }
        shortenNumber(num1)
    }

    func fixBlankList (num List<int>){
        if List.Length(num) == 0 {
            Append(num,0)
        }
    }

    func getMaxLength2Num (num1 List<int>, num2 List<int>) int{
        if List.Length(num2) > List.Length(num1){
            return List.Length(num2)
        } else {
            return List.Length(num1) 
        }
    }
    
}