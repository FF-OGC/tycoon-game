import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "Strings.fcc" as Strings
import "Player.fcc" as Player
import "List.fcc" as List
import "Math.fcc" as Math

graph BigNumberHandler {
    testNum1 List<int> = List<int>{999, 999, 999, 999}
    testNum2 List<int> = List<int>{2, 2, 2, 0,0,0,0,0,0,0}

    testNum3 List<int> = List<int>{ 0,0,0,0,0,0,0}

    

    //Executed when entity is created
    event OnAwake() {
    }

    event OnJump() {
        while true {
            multiplierNumber( testNum1 , 999)
            LogInfo("test num 1 " + testNum1)
            WaitForMillisecond(500)
        }
    }


    func shortenNumber(num List<int>){
        for i = 0, List.Length(num), 1 {
            if num[i]> 999 {
                if i== List.Length(num) - 1 && num[List.Length(num) - 1 ] >0{
                    LogInfo("u good")
                    Append(num,num[i] / 1000)
                } else {
                    num[i+1] = num[i+1] + num[i] / 1000
                }
                num[i] = num[i] % 1000
            }
        }
    }
    
    func cleanNumber(num List<int>){
        if (List.Length(num) == 0 ){
            return
        }

        while num[List.Length(num)-1] == 0{
            List.RemoveAt(num,List.Length(num)-1)
            if (List.Length(num) == 0 ){
                return
            }
        }
    }

    
    func addNumber(num1 List<int>, num2 List<int>) {
        for i = 0, List.Length(num1), 1 {
            num1[i] = num1[i] + num2[i]
        }
        shortenNumber(num1)
    }   


    func subtractNumber(num1 List<int>, num2 List<int>) {
        for i = 0, List.Length(num1), 1 {
            if num1[i] < num2[i]{
                num1[i] =  1000 - num2[i] + num1[i]
                num1[i+1] = num1[i+1]- 1
            } else {
                num1[i] = num1[i] - num2[i]
            }
        }
        shortenNumber(num1)
    }

    func multiplierNumber (num1 List<int>, multiplier float) {
        for i = 0, List.Length(num1), 1 {
            num1[i]  = Ceil( num1[i] * multiplier)
        }
        shortenNumber(num1)
    }
    
}