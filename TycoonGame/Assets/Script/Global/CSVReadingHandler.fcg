import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib
import "CSVData.fcc" as CSVData

import Res from "EditorGenLib.fcc"
import "../Economy/BigNumberHandler.fcg" as BigNumberHandler
import "Buff.fcc" as Buff

static graph CSVReadingHandler {
    //Executed when entity is created
    event OnAwake() {

    }

    func GetInformation(keyCSV CsvID, keyROW int, key object) List<object>{
        var _list  = ReadCSVRowByKey(keyCSV as CsvID, keyROW, key as  int)
        return _list
    }

    func GetNameByBuildingID(keyCSV CsvID, id int) string{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        
        var _index = BuildingConfigEnum.Name as int
        return _list[_index] as string
    }

    func GetUnlockCostByBuildingID(keyCSV CsvID, id int) List<int>{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        
        var _index = BuildingConfigEnum.Name as int
        var result = BigNumberHandler.convertStringToList(_list[_index] as string)
        return result
    }

    func GetOutputIDByBuildingID(keyCSV CsvID, id int) int{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        
        var _index = BuildingConfigEnum.Output as int
        return _list[_index] as int
    }

    
    func getItemNameByID(keyCSV CsvID, id int) string{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        var _index = ItemConfigEnum.Name as int
        return _list[_index] as string
    }

    func getItemIDByItemName(keyCSV CsvID, name string)int {
        var _list = GetInformation(keyCSV as CsvID, ItemConfigEnum.Name, name )
        if  _list[0] == nil {
            return 0
        }
        var _index = ItemConfigEnum.ID as int
        return _list[_index] as int
    }

    func getItemPriceByItemID(keyCSV CsvID, id int) List<int>{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        
        var _index = ItemConfigEnum.Price as int
        var result = BigNumberHandler.convertStringToList(_list[_index] as string)
        return result
    }


    func getItemPrefabByItemID(keyCSV CsvID, id int) string{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        
        var _index = ItemConfigEnum.Prefab as int
        var result = _list[_index] as string
        return result
    }

    func getItemCookingTimeByItemID(keyCSV CsvID, id int) int{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        
        var _index = ItemConfigEnum.CookingTime as int
        var result = _list[_index] as int
        return result
    }

    func getOutputItemByItemID(keyCSV CsvID, id int) int{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        
        var _index = ItemConfigEnum.Output as int
        var result = _list[_index] as int
        return result
    }

    func getLevelItemByItemID(keyCSV CsvID, id int) int{
        var _list = GetInformation(keyCSV as CsvID, 1, id )
        if  _list[0] == nil {
            _list = GetInformation(keyCSV as CsvID, 1, id-1 )
        }
        
        var _index = ItemConfigEnum.Level as int
        var result = _list[_index] as int
        return result
    }




}