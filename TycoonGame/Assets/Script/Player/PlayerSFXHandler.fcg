import "Animation.fcc" as Animation
import "Playable.fcc" as Playable
import "StdLibrary.fcc" as StdLib
import "EditorGenLib.fcc" as EditorLib

import Res from "EditorGenLib.fcc"


graph SFXHandler {
    backgroundMusic entity<SoundEffect>

    event PLAY_SFX(ereskey object) {
        CreateSound(out var _sound, thisEntity<Player>,Res.Sound[ereskey as EResKeySound] as SoundEffectType,LoopType.Default,true)
        _sound<SoundEffect>.Volume = 100
        WaitForMillisecond(5000)
        Destroy(_sound)
    }
    
    event PLAY_SFX_DURATION(ereskey object, duration object) {
        CreateSound(out var _sound, thisEntity<Player>,Res.Sound[ereskey as EResKeySound] as SoundEffectType,LoopType.Default,true)
        _sound<SoundEffect>.Volume = 100
        WaitForMillisecond(duration as int * 1000)
        Destroy(_sound)
    }

    event PLAY_BG_MUSIC(ereskey object) {
        offBGMusic()

        CreateSound(out var _sound, thisEntity<Player>,Res.Sound[ereskey as EResKeySound] as SoundEffectType,LoopType.Default,true)
        backgroundMusic = _sound
        Play(backgroundMusic<SoundEffect>, true)
        _sound<SoundEffect>.Volume = 10
    }

    event PLAY_SFX_VOLUME_DURATION(ereskey object, volume object, duration object) {
        CreateSound(out var _sound, thisEntity<Player>,Res.Sound[ereskey as EResKeySound] as SoundEffectType,LoopType.Default,true)
        _sound<SoundEffect>.Volume = volume as int
        WaitForMillisecond(duration as int * 1000)
        Destroy(_sound)
    }


    func offBGMusic(){
        Destroy(backgroundMusic)
        Pause(backgroundMusic<SoundEffect>)
    }
    
}